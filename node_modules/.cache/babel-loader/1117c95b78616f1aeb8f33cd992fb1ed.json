{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { promiseMiddleware, localStorageMiddleware } from './middleware';\nimport reducer from './reducer';\nimport { routerMiddleware } from 'react-router-redux';\nimport createHistory from 'history/createBrowserHistory';\nexport const history = createHistory(); // Build the middleware for intercepting and dispatching navigation actions\n\nconst myRouterMiddleware = routerMiddleware(history);\n\nconst getMiddleware = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware);\n  } else {\n    // Enable additional logging in non-production environments.\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware, createLogger());\n  }\n};\n\nexport const store = createStore(reducer, composeWithDevTools(getMiddleware()));","map":{"version":3,"sources":["/storage/emulated/0/ASTRO/projects/react_2/src/store.js"],"names":["applyMiddleware","createStore","createLogger","composeWithDevTools","promiseMiddleware","localStorageMiddleware","reducer","routerMiddleware","createHistory","history","myRouterMiddleware","getMiddleware","process","env","NODE_ENV","store"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,iBAAT,EAA4BC,sBAA5B,QAA0D,cAA1D;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AAEA,OAAO,MAAMC,OAAO,GAAGD,aAAa,EAA7B,C,CAEP;;AACA,MAAME,kBAAkB,GAAGH,gBAAgB,CAACE,OAAD,CAA3C;;AAEA,MAAME,aAAa,GAAG,MAAM;AAC1B,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,WAAOd,eAAe,CAACU,kBAAD,EAAqBN,iBAArB,EAAwCC,sBAAxC,CAAtB;AACD,GAFD,MAEO;AACL;AACA,WAAOL,eAAe,CAACU,kBAAD,EAAqBN,iBAArB,EAAwCC,sBAAxC,EAAgEH,YAAY,EAA5E,CAAtB;AACD;AACF,CAPD;;AASA,OAAO,MAAMa,KAAK,GAAGd,WAAW,CAC9BK,OAD8B,EACrBH,mBAAmB,CAACQ,aAAa,EAAd,CADE,CAAzB","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { promiseMiddleware, localStorageMiddleware } from './middleware';\nimport reducer from './reducer';\n\nimport { routerMiddleware } from 'react-router-redux'\nimport createHistory from 'history/createBrowserHistory';\n\nexport const history = createHistory();\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst myRouterMiddleware = routerMiddleware(history);\n\nconst getMiddleware = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware);\n  } else {\n    // Enable additional logging in non-production environments.\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware, createLogger())\n  }\n};\n\nexport const store = createStore(\n  reducer, composeWithDevTools(getMiddleware()));\n"]},"metadata":{},"sourceType":"module"}