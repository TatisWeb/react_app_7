{"ast":null,"code":"import{applyMiddleware,createStore}from'redux';import{createLogger}from'redux-logger';import{composeWithDevTools}from'redux-devtools-extension/developmentOnly';import{promiseMiddleware,localStorageMiddleware}from'./middleware';import reducer from'./reducer';import{routerMiddleware}from'react-router-redux';import createHistory from'history/createBrowserHistory';export var history=createHistory();// Build the middleware for intercepting and dispatching navigation actions\nvar myRouterMiddleware=routerMiddleware(history);var getMiddleware=function getMiddleware(){if(process.env.NODE_ENV==='production'){return applyMiddleware(myRouterMiddleware,promiseMiddleware,localStorageMiddleware);}else{// Enable additional logging in non-production environments.\nreturn applyMiddleware(myRouterMiddleware,promiseMiddleware,localStorageMiddleware,createLogger());}};export var store=createStore(reducer,composeWithDevTools(getMiddleware()));","map":{"version":3,"sources":["/storage/emulated/0/ASTRO/projects/react_2/src/store.js"],"names":["applyMiddleware","createStore","createLogger","composeWithDevTools","promiseMiddleware","localStorageMiddleware","reducer","routerMiddleware","createHistory","history","myRouterMiddleware","getMiddleware","process","env","NODE_ENV","store"],"mappings":"AAAA,OAASA,eAAT,CAA0BC,WAA1B,KAA6C,OAA7C,CACA,OAASC,YAAT,KAA6B,cAA7B,CACA,OAASC,mBAAT,KAAoC,0CAApC,CACA,OAASC,iBAAT,CAA4BC,sBAA5B,KAA0D,cAA1D,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAEA,OAASC,gBAAT,KAAiC,oBAAjC,CACA,MAAOC,CAAAA,aAAP,KAA0B,8BAA1B,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAGD,aAAa,EAA7B,CAEP;AACA,GAAME,CAAAA,kBAAkB,CAAGH,gBAAgB,CAACE,OAAD,CAA3C,CAEA,GAAME,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzC,MAAOd,CAAAA,eAAe,CAACU,kBAAD,CAAqBN,iBAArB,CAAwCC,sBAAxC,CAAtB,CACD,CAFD,IAEO,CACL;AACA,MAAOL,CAAAA,eAAe,CAACU,kBAAD,CAAqBN,iBAArB,CAAwCC,sBAAxC,CAAgEH,YAAY,EAA5E,CAAtB,CACD,CACF,CAPD,CASA,MAAO,IAAMa,CAAAA,KAAK,CAAGd,WAAW,CAC9BK,OAD8B,CACrBH,mBAAmB,CAACQ,aAAa,EAAd,CADE,CAAzB","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { promiseMiddleware, localStorageMiddleware } from './middleware';\nimport reducer from './reducer';\n\nimport { routerMiddleware } from 'react-router-redux'\nimport createHistory from 'history/createBrowserHistory';\n\nexport const history = createHistory();\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst myRouterMiddleware = routerMiddleware(history);\n\nconst getMiddleware = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware);\n  } else {\n    // Enable additional logging in non-production environments.\n    return applyMiddleware(myRouterMiddleware, promiseMiddleware, localStorageMiddleware, createLogger())\n  }\n};\n\nexport const store = createStore(\n  reducer, composeWithDevTools(getMiddleware()));\n"]},"metadata":{},"sourceType":"module"}