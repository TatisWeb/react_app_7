{"ast":null,"code":"import superagentPromise from 'superagent-promise';\nimport _superagent from 'superagent';\nconst superagent = superagentPromise(_superagent, global.Promise);\nconst API_ROOT = 'https://conduit.productionready.io/api';\nconst encode = encodeURIComponent;\n\nconst responseBody = res => res.body;\n\nlet token = null;\n\nconst tokenPlugin = req => {\n  if (token) {\n    req.set('authorization', `Token ${token}`);\n  }\n};\n\nconst requests = {\n  del: url => superagent.del(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\n  get: url => superagent.get(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\n  put: (url, body) => superagent.put(`${API_ROOT}${url}`, body).use(tokenPlugin).then(responseBody),\n  post: (url, body) => superagent.post(`${API_ROOT}${url}`, body).use(tokenPlugin).then(responseBody)\n};\nconst Auth = {\n  current: () => requests.get('/user'),\n  login: (email, password) => requests.post('/users/login', {\n    user: {\n      email,\n      password\n    }\n  }),\n  register: (username, email, password) => requests.post('/users', {\n    user: {\n      username,\n      email,\n      password\n    }\n  }),\n  save: user => requests.put('/user', {\n    user\n  })\n};\nconst Tags = {\n  getAll: () => requests.get('/tags')\n};\n\nconst limit = (count, p) => `limit=${count}&offset=${p ? p * count : 0}`;\n\nconst omitSlug = article => Object.assign({}, article, {\n  slug: undefined\n});\n\nconst Articles = {\n  all: page => requests.get(`/articles?${limit(10, page)}`),\n  byAuthor: (author, page) => requests.get(`/articles?author=${encode(author)}&${limit(5, page)}`),\n  byTag: (tag, page) => requests.get(`/articles?tag=${encode(tag)}&${limit(10, page)}`),\n  del: slug => requests.del(`/articles/${slug}`),\n  favorite: slug => requests.post(`/articles/${slug}/favorite`),\n  favoritedBy: (author, page) => requests.get(`/articles?favorited=${encode(author)}&${limit(5, page)}`),\n  feed: () => requests.get('/articles/feed?limit=10&offset=0'),\n  get: slug => requests.get(`/articles/${slug}`),\n  unfavorite: slug => requests.del(`/articles/${slug}/favorite`),\n  update: article => requests.put(`/articles/${article.slug}`, {\n    article: omitSlug(article)\n  }),\n  create: article => requests.post('/articles', {\n    article\n  })\n};\nconst Comments = {\n  create: (slug, comment) => requests.post(`/articles/${slug}/comments`, {\n    comment\n  }),\n  delete: (slug, commentId) => requests.del(`/articles/${slug}/comments/${commentId}`),\n  forArticle: slug => requests.get(`/articles/${slug}/comments`)\n};\nconst Profile = {\n  follow: username => requests.post(`/profiles/${username}/follow`),\n  get: username => requests.get(`/profiles/${username}`),\n  unfollow: username => requests.del(`/profiles/${username}/follow`)\n};\nexport default {\n  Articles,\n  Auth,\n  Comments,\n  Profile,\n  Tags,\n  setToken: _token => {\n    token = _token;\n  }\n};","map":{"version":3,"sources":["/storage/emulated/0/ASTRO/projects/react_2/src/agent.js"],"names":["superagentPromise","_superagent","superagent","global","Promise","API_ROOT","encode","encodeURIComponent","responseBody","res","body","token","tokenPlugin","req","set","requests","del","url","use","then","get","put","post","Auth","current","login","email","password","user","register","username","save","Tags","getAll","limit","count","p","omitSlug","article","Object","assign","slug","undefined","Articles","all","page","byAuthor","author","byTag","tag","favorite","favoritedBy","feed","unfavorite","update","create","Comments","comment","delete","commentId","forArticle","Profile","follow","unfollow","setToken","_token"],"mappings":"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","sourcesContent":["import superagentPromise from 'superagent-promise';\nimport _superagent from 'superagent';\n\nconst superagent = superagentPromise(_superagent, global.Promise);\n\nconst API_ROOT = 'https://conduit.productionready.io/api';\n\nconst encode = encodeURIComponent;\nconst responseBody = res => res.body;\n\nlet token = null;\nconst tokenPlugin = req => {\n  if (token) {\n    req.set('authorization', `Token ${token}`);\n  }\n}\n\nconst requests = {\n  del: url =>\n    superagent.del(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\n  get: url =>\n    superagent.get(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\n  put: (url, body) =>\n    superagent.put(`${API_ROOT}${url}`, body).use(tokenPlugin).then(responseBody),\n  post: (url, body) =>\n    superagent.post(`${API_ROOT}${url}`, body).use(tokenPlugin).then(responseBody)\n};\n\nconst Auth = {\n  current: () =>\n    requests.get('/user'),\n  login: (email, password) =>\n    requests.post('/users/login', { user: { email, password } }),\n  register: (username, email, password) =>\n    requests.post('/users', { user: { username, email, password } }),\n  save: user =>\n    requests.put('/user', { user })\n};\n\nconst Tags = {\n  getAll: () => requests.get('/tags')\n};\n\nconst limit = (count, p) => `limit=${count}&offset=${p ? p * count : 0}`;\nconst omitSlug = article => Object.assign({}, article, { slug: undefined })\nconst Articles = {\n  all: page =>\n    requests.get(`/articles?${limit(10, page)}`),\n  byAuthor: (author, page) =>\n    requests.get(`/articles?author=${encode(author)}&${limit(5, page)}`),\n  byTag: (tag, page) =>\n    requests.get(`/articles?tag=${encode(tag)}&${limit(10, page)}`),\n  del: slug =>\n    requests.del(`/articles/${slug}`),\n  favorite: slug =>\n    requests.post(`/articles/${slug}/favorite`),\n  favoritedBy: (author, page) =>\n    requests.get(`/articles?favorited=${encode(author)}&${limit(5, page)}`),\n  feed: () =>\n    requests.get('/articles/feed?limit=10&offset=0'),\n  get: slug =>\n    requests.get(`/articles/${slug}`),\n  unfavorite: slug =>\n    requests.del(`/articles/${slug}/favorite`),\n  update: article =>\n    requests.put(`/articles/${article.slug}`, { article: omitSlug(article) }),\n  create: article =>\n    requests.post('/articles', { article })\n};\n\nconst Comments = {\n  create: (slug, comment) =>\n    requests.post(`/articles/${slug}/comments`, { comment }),\n  delete: (slug, commentId) =>\n    requests.del(`/articles/${slug}/comments/${commentId}`),\n  forArticle: slug =>\n    requests.get(`/articles/${slug}/comments`)\n};\n\nconst Profile = {\n  follow: username =>\n    requests.post(`/profiles/${username}/follow`),\n  get: username =>\n    requests.get(`/profiles/${username}`),\n  unfollow: username =>\n    requests.del(`/profiles/${username}/follow`)\n};\n\nexport default {\n  Articles,\n  Auth,\n  Comments,\n  Profile,\n  Tags,\n  setToken: _token => { token = _token; }\n};\n"]},"metadata":{},"sourceType":"module"}