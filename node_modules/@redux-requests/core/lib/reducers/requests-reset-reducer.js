"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _constants = require("../constants");

var getRequestTypeString = function getRequestTypeString(requestType) {
  return typeof requestType === 'function' ? requestType.toString() : requestType;
};

var getKeys = function getKeys(requests) {
  return requests.map(function (v) {
    return typeof v === 'object' ? getRequestTypeString(v.requestType) + v.requestKey : getRequestTypeString(v);
  });
};

var resetQuery = function resetQuery(query) {
  return (0, _extends2["default"])({}, query, {
    data: null,
    error: null,
    pristine: true,
    usedKeys: query.normalized ? {} : null
  });
};

var resetMutation = function resetMutation(mutation) {
  return (0, _extends2["default"])({}, mutation, {
    error: null
  });
}; // TODO: this should be rewritten to more functional style, we need things like filter/map object helpers


var _default = function _default(state, action) {
  if (action.type !== _constants.RESET_REQUESTS) {
    return state;
  }

  var queries = state.queries,
      mutations = state.mutations,
      cache = state.cache,
      downloadProgress = state.downloadProgress,
      uploadProgress = state.uploadProgress;
  var clearAll = !action.requests;
  var keys = !clearAll && getKeys(action.requests);
  queries = Object.entries(queries).reduce(function (prev, _ref) {
    var k = _ref[0],
        v = _ref[1];

    if (clearAll || keys.includes(k)) {
      prev[k] = resetQuery(v);
    } else {
      prev[k] = v;
    }

    return prev;
  }, {});
  mutations = Object.entries(mutations).reduce(function (prev, _ref2) {
    var k = _ref2[0],
        v = _ref2[1];

    if (clearAll || keys.includes(k)) {
      prev[k] = resetMutation(v);
    } else {
      prev[k] = v;
    }

    return prev;
  }, {});
  cache = clearAll ? {} : Object.entries(cache).reduce(function (prev, _ref3) {
    var k = _ref3[0],
        v = _ref3[1];

    if (keys.includes(k)) {
      return prev;
    }

    prev[k] = v;
    return prev;
  }, {});
  downloadProgress = clearAll ? {} : Object.entries(downloadProgress).reduce(function (prev, _ref4) {
    var k = _ref4[0],
        v = _ref4[1];

    if (keys.includes(k)) {
      return prev;
    }

    prev[k] = v;
    return prev;
  }, {});
  uploadProgress = clearAll ? {} : Object.entries(uploadProgress).reduce(function (prev, _ref5) {
    var k = _ref5[0],
        v = _ref5[1];

    if (keys.includes(k)) {
      return prev;
    }

    prev[k] = v;
    return prev;
  }, {});
  return {
    queries: queries,
    mutations: mutations,
    cache: cache,
    downloadProgress: downloadProgress,
    uploadProgress: uploadProgress
  };
};

exports["default"] = _default;